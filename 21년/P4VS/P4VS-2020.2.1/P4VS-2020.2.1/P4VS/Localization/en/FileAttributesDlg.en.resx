<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="label1.Text" xml:space="preserve">
    <value>Base Filetype:</value>
  <comment>original:|Base Filetype:|:</comment></data>
	<data name="label2.Text" xml:space="preserve">
    <value>Workspace related attributes:</value>
  <comment>original:|Workspace related attributes:|:</comment></data>
	<data name="PreserveLocalModTimeCB.Text" xml:space="preserve">
    <value>+m  Preserve local modification times</value>
  <comment>original:|+m  Preserve local modification times|:</comment></data>
	<data name="AlwaywsWritableCB.Text" xml:space="preserve">
    <value>+w  Always writable in Workspace</value>
  <comment>original:|+w  Always writable in Workspace|:</comment></data>
	<data name="ExcecBitSetCB.Text" xml:space="preserve">
    <value>+x   Exec bit set in workspace</value>
  <comment>original:|+x   Exec bit set in workspace|:</comment></data>
	<data name="RcsKeywordExpansionCB.Text" xml:space="preserve">
    <value>+k   RCS keyword expansion</value>
  <comment>original:|+k   RCS keyword expansion|:</comment></data>
	<data name="RcsLimitedKeywordExpansionCB.Text" xml:space="preserve">
    <value>+ko RXS keyword expansion of $Id$, $Header$ only</value>
  <comment>original:|+ko RXS keyword expansion of $Id$, $Header$ only|:</comment></data>
	<data name="ExclusiveCheckoutsCB.Text" xml:space="preserve">
    <value>+l   Exclusive checkout (don't allow concurrent checkouts)</value>
  <comment>original:|+l   Exclusive checkout (don't allow concurrent checkouts)|:</comment></data>
	<data name="label3.Text" xml:space="preserve">
    <value>Server storage method:</value>
  <comment>original:|Server storage method:|:</comment></data>
	<data name="label4.Text" xml:space="preserve">
    <value>Add files to pending changelist:</value>
  <comment>original:|Add files to pending changelist:|:</comment></data>
	<data name="OkBtn.Text" xml:space="preserve">
    <value>OK</value>
  <comment>original:|OK|:</comment></data>
	<data name="CancelBtn.Text" xml:space="preserve">
    <value>Cancel</value>
  <comment>original:|Cancel|:</comment></data>
	<data name="AddAtrributesRB.Text" xml:space="preserve">
    <value>Add additional file attributes</value>
  <comment>original:|Add additional file attributes|:</comment></data>
	<data name="ChangeBaseTypeRB.Text" xml:space="preserve">
    <value>Change Base FileType and/or file attributes</value>
  <comment>original:|Change Base FileType and/or file attributes|:</comment></data>
	<data name="FullFileRB.Text" xml:space="preserve">
    <value>+F  Server stores full file per revision</value>
  <comment>original:|+F  Server stores full file per revision|:</comment></data>
	<data name="RCSDeltasRB.Text" xml:space="preserve">
    <value>+D  Server stores deltas in RCS format (text default)</value>
  <comment>original:|+D  Server stores deltas in RCS format (text default)|:</comment></data>
	<data name="CompressedFilesRB.Text" xml:space="preserve">
    <value>+C  Server stores compressed file per revision (binary default)</value>
  <comment>original:|+C  Server stores compressed file per revision (binary default)|:</comment></data>
	<data name="UseDefaultForTypeRB.Text" xml:space="preserve">
    <value>Server stores revisions using default method for base file type</value>
  <comment>original:|Server stores revisions using default method for base file type|:</comment></data>
	<data name="LimitRevsCB.Text" xml:space="preserve">
    <value>Server limits the number of revisions to:</value>
  <comment>original:|Server limits the number of revisions to:|:</comment></data>
	<data name="MaxRevsCB.Items" xml:space="preserve">
    <value>1</value>
  <comment>original:|1|:</comment></data>
	<data name="MaxRevsCB.Items1" xml:space="preserve">
    <value>2</value>
  <comment>original:|2|:</comment></data>
	<data name="MaxRevsCB.Items2" xml:space="preserve">
    <value>3</value>
  <comment>original:|3|:</comment></data>
	<data name="MaxRevsCB.Items3" xml:space="preserve">
    <value>4</value>
  <comment>original:|4|:</comment></data>
	<data name="MaxRevsCB.Items4" xml:space="preserve">
    <value>5</value>
  <comment>original:|5|:</comment></data>
	<data name="MaxRevsCB.Items5" xml:space="preserve">
    <value>6</value>
  <comment>original:|6|:</comment></data>
	<data name="MaxRevsCB.Items6" xml:space="preserve">
    <value>7</value>
  <comment>original:|7|:</comment></data>
	<data name="MaxRevsCB.Items7" xml:space="preserve">
    <value>8</value>
  <comment>original:|8|:</comment></data>
	<data name="MaxRevsCB.Items8" xml:space="preserve">
    <value>9</value>
  <comment>original:|9|:</comment></data>
	<data name="MaxRevsCB.Items9" xml:space="preserve">
    <value>10</value>
  <comment>original:|10|:</comment></data>
	<data name="MaxRevsCB.Items10" xml:space="preserve">
    <value>16</value>
  <comment>original:|16|:</comment></data>
	<data name="MaxRevsCB.Items11" xml:space="preserve">
    <value>32</value>
  <comment>original:|32|:</comment></data>
	<data name="MaxRevsCB.Items12" xml:space="preserve">
    <value>64</value>
  <comment>original:|64|:</comment></data>
	<data name="MaxRevsCB.Items13" xml:space="preserve">
    <value>128</value>
  <comment>original:|128|:</comment></data>
	<data name="MaxRevsCB.Items14" xml:space="preserve">
    <value>256</value>
  <comment>original:|256|:</comment></data>
	<data name="MaxRevsCB.Items15" xml:space="preserve">
    <value>512</value>
  <comment>original:|512|:</comment></data>
	<data name="$this.Text" xml:space="preserve">
    <value>Change Filetype</value>
  <comment>original:|Change Filetype|:</comment></data>
</root>