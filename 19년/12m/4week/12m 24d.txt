오늘 배운것 

유니티 설치

유니티에서 변수타입 string 
string[]  변수이름 = {"~","~"}
foreach문
var fibNumbers = new List<int> { 0, 1, 1, 2, 3, 5, 8, 13 };
int count = 0;
foreach (int element in fibNumbers)
{
    count++;
    Console.WriteLine($"Element #{count}: {element}");
}
클래스
한프로젝트에서 만든것을 다른곳에서도 사용할 수 있다.

인스턴스: 정의된 클래스를 변수 초기화로 실체화

접근자?
사실 맨앞에 private 이 설정되어있던것이다. 

상속

--------
생명주기

Awake: 게임 오브젝트 생성할 떄, 최초 실행( 생성자 같은건가)
Start: 업데이트 시작 직전, 최초 실행 (한 번만 실행)
위에 두개가 초기화 영역


물리연산영역
FixedUpdate: 물리연산을하기전에 업데이트하는 함수(업데이트 함수는 1초에 여러번작동하는함수 고정된실행주기로 cpu부하가 많다. )

Update:게임로직 업데이트(물리연산과 관련된 로직을제외한 나머지 주기적으로 변하는로직을 넣을때 사용, 환경에따라서 실행주기가 떨어질 수 있다.)


LateUpdate:모든 업데이트 끝난후(카메라,후처리등)
OnDestroy: 게임오브젝트가  삭제될 떄

OnEnable: 게임 오브젝트가 활성화 되었을때 (초기화 영역하고 물리영역 사이에 위치
OnDisable: 게임 오브젝트가 비활성화 되었을때(게임로직하고 해체영역사이에 위치)

-------------------
키보드 마우스입력
Input 게임 내입력을 관리하는 클래스
anyKeyDown: 아무입력을 최초로 받을때 true
anyKey: 아무 입력을 받으면 true

입력방식은 
down stay up으로 3가지로 구분

GetKey: 키보드 버튼 입력을 받으면 true

마우스
GetMouse:마우스 버튼 입력을 받으면 true 매개변수로 숫자로 받음
대표적으로 0또는 1 0은 왼쪽버튼 1은 오른쪽버튼

버튼방식 :유니티에서 지정해준 키를이용 
edit->project setting->input->inputManager 

GetButton:Input 버튼 입력을 받으면 true (매개변수로 stirng값을 준다.)

횡이동값을 받는다.
GetAxis: 수평, 수직 버튼 입력을 받으면 float

오브젝트는 변수 transform을 항상 가지고 있음.

 // Debug.Log("횡 이동 중 ..." + Input.GetAxis("Horizontal")); //가중치있음
           Debug.Log("횡 이동 중 ..." + Input.GetAxisRaw("Horizontal"));//무조건 마지막값만나옴

----------------
오브젝트 이동

Transform:오브젝트 형태에 대한 기본 컴포넌트
Translate: 벡터 값을 현재 위치에 더하는 함수

--------------
목표지점으로 이동

MoveTowards:등속이동
SmoothDamp:부드러운 감속이동(매개변수: 현재위치, 목표위치, 참조속도,속도) 마지막매개변수에 반비례하여 속도증가
ref: 참조접근->실시간으로 바뀌는 값 적용 가능
Lerp: 선형보간, SmoothDamp보다 감속시간이 김
SLerp: 구면 선형보간, 호를 그리며 이동
Time.deltaTime:이전 프레임의 완료까지 걸린 시간(값은 프레임이 적으면 크고, 프레임이 많으면 작음)

------------
실제와 같은 물체를 만들기

add Component로 속성추가
RigidBody:물리효과를 받기 위한 컴포넌트

2.충돌영역 정하기
Sphere Collider에서 Radius 설정

3.RigidBody 설정
무게 설정
 RigidBody>Is Kinematic: 외부 물리효과 무시

4.재질만들기
Meterial 설정
project 우클릭 create-> meterial
Metallic은 금속정도 설정
Smoothness 빛받는 정도 설정
그림 넣고 싶으면 그림을 albedo에 쭉 끌어서 넣기

Material>Tiling 텍스쳐 반복 타일개수
Material>Emission 텍스쳐 발광(밝기) 조절(빛이 물리적으로 나오는것은 아님)

5. 물리 재질 만들기
project 우클릭 create-> 물리메테리얼 ->끌어서 오브젝트에 넣기 이것은 충돌속성에 추가된다.
Bounciness: 탄성력, 높을수록 많이 튀어오름 (0~1)
Boounciness Combine:다음 탄성을 계산하는 방식
Friction: 마찰력, 낮을수록 많이 미끄러짐. ( staitc은 정지했을때 적용 ,dynamic은 움직일때 정용되는 마찰력)
Friction Combine: 다음 마찰력을 계산하는 방식(미끄러지는 효과를 주기위해서는 이것을 minmum으로 잡기)
물체 필수 요소: Mesh, Material, Collider, RigidBody
------------
힘을 이용하여 물체 움직여 보기

1. 컴포넌트 가져오기
선언-> 초기화 ->호출
GetComponent<T>: 자신의T타입 컴포넌트를 가져옴
2.속도올리기 
velocity: 현재 이동속도

RigidBody 관련 코드는 FixedUpdate에 작성

3.힘으로 밀기
AddForce(Vec):Vec의 방향과 크기로 힘을 줌.
ForceMode:힘을 주는 방식(가속,무게반영) 가장많이쓰는거는 임펄스(이거는 무게영향을받음)

4. 회전력 주기
AddTorque(Vec):Vec 방향을 축으로 회전력이 생김.

----------
물리 충돌 이벤트

MeshRenderer:오브젝트의 재질 접근은 MeshRenderer를 통해서

인벤트성함수 앞에는 보통 on을 붙인다.
CollisionEnter:물리적 충돌이 시작할때 호출되는 함수.
CollisionStay:충돌이 일어나고 있을때 호출되는 함수
CollisionExit(Collision collision):물리적 충돌이 끝났을 때 호출되는 함수.
Color:기본 색상 클래스, Color32: 255색상 클래스

Collision:충돌 정보 클래스

2. 트리거 이벤트

무명하게
Material-> RenderingMode를 Transparent로 변경후 Alebedo에서 알파값 조정
TriggerStay:콜라이더가 계속 충돌하고 있을 때 호출.(물리적인 충돌아님)
CollisionExit: 물리적 충돌이 끝났을 때 호출되는 함수.
